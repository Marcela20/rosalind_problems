genome = 'TATCAAAACGGTTCAGCGACAGATCAAAAGATCAAAAGATCAAAAGATCAAAATAGCGAGAATCAAAAATCAAAATATCAAAATATCAAAAATCAAAACCCGATCAAAAGACATCAAAAATCAAAAGTCAATCAAAAGGCCTATCAAAAATCAAAAGATCAAAAGGATATCAAAATATCAAAAGGATCAAAAATCAAAACCATCAAAAATCAAAATTGAATCAAAAAGTGAATCAAAAAAAAATCAAAAACGTTTCCATCGGGCGTTAAATAGATCAAAAATCAAAAACCAATCAAAAACTATCAAAACCATCAAAAAATCAAAATCATCAAAAATCAAAAATCAAAAACAGGAATCAAAAGGCATCAAAAATCAAAAATCAAAAATCAAAAAATCAAAACATCAAAAATCAAAAGACATCAAAATATCAAAAAATCAAAACTAGATCAAAATAACTCTATCAAAAAATCAAAAAATCAAAAGTTATCAAAAATCAAAAATCAAAAATCAAAATCGGATCAAAAAAATATCAAAACAATCAAAATAATCAAAACATCAAAAATATCAAAATTATTATCAAAAATCAAAAGAGTGCATCAAAATTCTGATCAAAAATCAAAAATCAAAATTATCAAAAGGATCAAAAATCAAAAGATCAAAAATCAAAAATCAAAACCGCGATCCATCAAAAATCAAAACCTATCAAAAATCAAAATCATCAAAAATCAAAAGGGCATCAAAAAATCAAAATAAAGTGCCAATCAAAACATATCAAAATCTCATCAAAATATCAAAAGCCATCAAAATTATCAAAAACATCAAAAAAATCAAAACAGT'


def naive(p, t):
    occurances = []
    for i in range(len(t) - len(p) + 1):
        match = True
        for j in range(len(p)):
            if t[i + j] != p[j]:
                match = False
                break
        if match:
            occurances.append(i + 1)
    return occurances


oc = naive("ATCAAAAAT", genome)

r = 0
while r != -1:  # The find() method returns -1 if the value is not found
    r = genome.find("ATCAAAAAT", r + 1)
    print(r + 1)
